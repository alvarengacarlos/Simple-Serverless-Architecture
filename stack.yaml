AWSTemplateFormatVersion: "2010-09-09"

Description: "This is a serverless architecture that use API Gateway-Http Api, SQS, Lambda and DynamoDB"

Parameters:
    Environment:
        Type: String
        Default: "dev"
        AllowedValues:
            - "dev"
            - "prod"
        Description: "Define which environment will be used: production or development"
        ConstraintDescription: "Must be 'dev' or 'prod'"

Conditions:
    isProduction: !Equals [!Ref Environment, "prod"]

Resources:
    #Api Gateway
    ApiGateway:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: "ApiGateway"
            CorsConfiguration:
                AllowHeaders:
                    - "*"
                AllowMethods:
                    - "GET"
                    - "POST"
                    - "PUT"
                    - "PATCH"
                    - "DELETE"
                AllowOrigins:
                    - "*"
            ProtocolType: "HTTP"
    # Add Cognito. The issuer need be compatible with cognito (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-authorizer-jwtconfiguration.html)
    # ApiGatewayAuthorizer:
    #     Type: AWS::ApiGatewayV2::Authorizer
    #     Properties:
    #         ApiId: !Ref ApiGateway
    #         AuthorizerType: "JWT"
    #         Name: "JWTAuthorizer"
    #         JwtConfiguration:
    #             Audience:
    #               - 'br.com.thing'
    #             Issuer: ''
    ApiGatewayStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            ApiId: !Ref ApiGateway
            StageName: !Ref Environment
    GetDataRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref ApiGateway
            #AuthorizationType: "JWT"
            #AuthorizerId: !Ref ApiGatewayAuthorizer
            RouteKey: "GET /data"
            Target: !Join
                - '/'
                - - integrations
                  - !Ref ApiGatewayIntegration
    PostDataRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref ApiGateway
            #AuthorizationType: "JWT"
            #AuthorizerId: !Ref ApiGatewayAuthorizer
            RouteKey: "POST /data"
            Target: !Join
                - '/'
                - - integrations
                  - !Ref ApiGatewayIntegration
    PutDataRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref ApiGateway
            #AuthorizationType: "JWT"
            #AuthorizerId: !Ref ApiGatewayAuthorizer
            RouteKey: "PUT /data"
            Target: !Join
                - '/'
                - - integrations
                  - !Ref ApiGatewayIntegration
    PatchDataRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref ApiGateway
            #AuthorizationType: "JWT"
            #AuthorizerId: !Ref ApiGatewayAuthorizer
            RouteKey: "PATCH /data"
            Target: !Join
                - '/'
                - - integrations
                  - !Ref ApiGatewayIntegration
    DeleteDataRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref ApiGateway
            #AuthorizationType: "JWT"
            #AuthorizerId: !Ref ApiGatewayAuthorizer
            RouteKey: "DELETE /data"      
            Target: !Join
                - '/'
                - - integrations
                  - !Ref ApiGatewayIntegration
    ApiGatewayIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref ApiGateway
            IntegrationType: HTTP_PROXY
            IntegrationUri: !GetAtt FifoQueue.QueueUrl
            IntegrationMethod: ANY
            PayloadFormatVersion: '1.0'
    #Sqs
    FifoQueue:
        Type: AWS::SQS::Queue
        Properties:
            FifoQueue: true
            MessageRetentionPeriod: 60
            QueueName: 'alvarengacarlos-FifoQueue.fifo'
    #Lambda
    ProxyLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: 'alvarenga-carlos-lambda-bucket'
                S3Key: 'proxyLambdaFunction.zip'
            FunctionName: 'ProxyLambdaFunction'
            Handler: 'index.handler'
            Role: !GetAtt ProxyLambdaFunctionRole.Arn
            Runtime: 'nodejs16.x'
    ProxyLambdaFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: 'Allow'
                      Principal: 
                        Service:
                            - 'lambda.amazonaws.com'
                      Action:
                        - 'sts:AssumeRole'
            Policies:
                - PolicyName: 'ProxyLambdaPolicy'
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                        - Effect: 'Allow'
                          Action:
                            - 'logs:CreateLogGroup'
                            - 'logs:PutLogEvents'
                            - 'logs:CreateLogStream'                            
                          Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'                            
                        - Effect: 'Allow'                    
                          Action:
                            - 'sqs:ReceiveMessage'
                            - 'sqs:DeleteMessage'
                            - 'sqs:GetQueueAttributes'
                          Resource: !Join
                            - ''
                            - - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:'
                              - !GetAtt FifoQueue.QueueName
                        - Effect: 'Allow'                    
                          Action:
                            - 'dynamodb:GetItem'
                            - 'dynamodb:PutItem'
                            - 'dynamodb:UpdateItem'
                            - 'dynamodb:DeleteItem'
                            - 'dynamodb:Query'
                          Resource: !Sub 'arn:aws:dynamo:${AWS::Region}:${AWS::AccountId}:table/data'  
                        - Effect: 'Allow'                    
                          Action:
                            - 's3:GetObject'
                          Resource: !Sub 'arn:aws:s3:::alvarenga-carlos-lambda-bucket/*'
    FifoQueueEventSourceMapping:
        Type: 'AWS::Lambda::EventSourceMapping'
        Properties:
            BatchSize: 1
            Enabled: true
            EventSourceArn: !GetAtt FifoQueue.Arn
            FunctionName: !Ref ProxyLambdaFunction
    #DynamoDB
    DynamoDb:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: 'Id'
                  AttributeType: 'S'
            KeySchema:
                - AttributeName: 'Id'
                  KeyType: 'HASH'
            TableName: 'data'
            ProvisionedThroughput: 
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
