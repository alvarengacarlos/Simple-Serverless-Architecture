AWSTemplateFormatVersion: "2010-09-09"

Resources:
  ProxyAwsLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:        
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal: 
              Service: lambda.amazonaws.com
      Policies:  
        - PolicyName: !Sub "${AWS::StackName}-ProxyLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simple-serverless-arch-proxy-lambda:*"
      RoleName: simple-serverless-arch-proxy-lambda-role
  ProxyAwsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: 
        - arm64
      Code:
        S3Bucket: !ImportValue simple-serverless-arch-amazon-s3-bucket-ProxyLambdaS3BucketId
        S3Key: simple-serverless-arch-proxy-lambda.zip
      FunctionName: simple-serverless-arch-proxy-lambda
      Handler: ./src/index.handler
      PackageType: Zip
      Role: !GetAtt ProxyAwsLambdaRole.Arn
      Runtime: nodejs18.x
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt ProxyAwsLambda.Arn
      Description: v1

Outputs:
  ProxyAwsLambda:
    Value: !Ref ProxyAwsLambda
    Export:
      Name: !Sub "${AWS::StackName}ProxyAwsLambdaId"
  ProxyAwsLambdaArn:
    Value: !Join 
      - ''
      - - !GetAtt ProxyAwsLambda.Arn
        - ':'
        - !GetAtt LambdaVersion.Version
    Export:
      Name: !Sub "${AWS::StackName}-ProxyAwsLambdaArn"