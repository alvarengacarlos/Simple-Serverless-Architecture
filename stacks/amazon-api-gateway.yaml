AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AllowCorsForWhatOrigin:
    Type: String
    Default: ''
  DeployStage:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - v1

Resources:
  #I choose HTTP Api on this: <https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html>
  ApiGateway:  
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-ApiGateway"
      CorsConfiguration:
        AllowHeaders:
          - '*'
        AllowMethods:
          - 'GET'
          - 'POST'
          - 'PUT'
          - 'DELETE'
        AllowOrigins:
          - !Ref AllowCorsForWhatOrigin
      ProtocolType: HTTP
      Target: !ImportValue simple-serverless-arch-aws-lambda-ProxyAwsLambdaArn
      RouteKey: 'GET /info'
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue simple-serverless-arch-aws-lambda-ProxyAwsLambdaArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
  ApiGatewayAndLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Join 
        - ''
        - - !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
          - !ImportValue simple-serverless-arch-aws-lambda-ProxyAwsLambdaArn
          - '/invocations'
  ################
  # Word Routes #
  ################
  CreateWordRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'POST /words/{userId}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  GetWordRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /words/{userId}/{word}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  GetAllWordsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /words/{userId}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  UpdateWordRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'PATCH /words/{userId}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  DeleteWordRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'DELETE /words/{userId}/{word}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  ###################
  # Category Routes #
  ###################
  CreateWordCategoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'POST /word-categories'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  GetWordCategoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /word-categories/{name}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  GetAllWordCategoriesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /word-categories'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
  DeleteWordCategoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'DELETE /word-categories/{name}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayAndLambdaIntegration
    
Outputs:
  ApiGateway:
    Value: !Ref ApiGateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayId"